{"version":3,"sources":["views/graph.js","views/sort.js","App.js","serviceWorker.js","index.js"],"names":["Component","Sort","handleInputChange","event","setState","target","name","value","state","width","height","size","interval","method","data","generateArray","intervalId","queue","handleClickSort","bind","handleClickReset","handleClickMethod","bubbleSort","insertionSort","selectionSort","mergeSort","merge","quickSort","partition","heapSort","heapify","cocktailSort","startAnimation","dequeue","this","window","innerWidth","innerHeight","n","arr","i","index","score","temp","curr","top","length","Math","floor","random","stopInterval","clearInterval","j","push","key","minIndex","start","end","mid","Promise","all","start1","start2","partitionIndex","pivot","largest","left","right","swapped","setInterval","pow","shift","x","d","y","xMax","yMax","xScale","scaleBand","rangeRound","domain","map","padding","yScale","scaleLinear","max","Card","Header","Body","style","display","justifyContent","alignItems","fill","rx","Group","letter","barWidth","bandwidth","barHeight","barX","barY","Bar","Footer","Nav","variant","defaultActiveKey","Item","Link","eventKey","onClick","Row","Form","as","Col","Label","Control","type","min","step","onChange","parseInt","Button","block","App","Container","fluid","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uXASkCA,Y,sFCGbC,E,YACjB,aAAe,IAAD,8BACV,+CAgDJC,kBAAoB,SAACC,GACjB,EAAKC,SAAL,eACKD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SAjDtC,EAAKC,MAAQ,CACTC,MAAO,EAAGC,OAAQ,EAClBC,KAAM,IAAKC,SAAU,EACrBC,OAAQ,SACRC,KAAM,EAAKC,cAAc,KACzBC,WAAY,KACZC,MAAO,IAEX,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,kBAAoB,EAAKA,kBAAkBF,KAAvB,gBAEzB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAClB,EAAKI,cAAgB,EAAKA,cAAcJ,KAAnB,gBACrB,EAAKK,cAAgB,EAAKA,cAAcL,KAAnB,gBACrB,EAAKM,UAAY,EAAKA,UAAUN,KAAf,gBACjB,EAAKO,MAAQ,EAAKA,MAAMP,KAAX,gBACb,EAAKQ,UAAY,EAAKA,UAAUR,KAAf,gBACjB,EAAKS,UAAY,EAAKA,UAAUT,KAAf,gBACjB,EAAKU,SAAW,EAAKA,SAASV,KAAd,gBAChB,EAAKW,QAAU,EAAKA,QAAQX,KAAb,gBACf,EAAKY,aAAe,EAAKA,aAAaZ,KAAlB,gBAEpB,EAAKa,eAAiB,EAAKA,eAAeb,KAApB,gBACtB,EAAKc,QAAU,EAAKA,QAAQd,KAAb,gBA1BL,E,iFA8BVe,KAAK9B,SAAS,CACVK,MAA2B,GAApB0B,OAAOC,WACd1B,OAA6B,GAArByB,OAAOE,gB,oCAITC,GAEV,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAIF,EAAGE,IAAQD,EAAIC,GAAK,CAAEC,MAAOD,EAAGE,MAAOF,EAAI,GAC/D,IAAIG,EAAMC,EAAMC,EAAMN,EAAIO,OAC1B,GAAID,EAAK,OAAQA,GAEbF,EAAOJ,EADPK,EAAOG,KAAKC,MAAMD,KAAKE,UAAYJ,EAAM,KAEzCN,EAAIK,GAAQL,EAAIM,GAChBN,EAAIM,GAAOF,EAEf,OAAOJ,I,wCASO1B,GACdqB,KAAK9B,SAAS,CAAES,WAChBqB,KAAKd,qB,yCAILc,KAAKgB,eADU,IAEPvC,EAASuB,KAAK1B,MAAdG,KACFG,EAAOoB,KAAKnB,cAAcJ,GAEhCuB,KAAK9B,SAAS,CAAEU,OAAMG,MADR,O,wCAIC,IAAD,EACWiB,KAAK1B,MAAtBM,EADM,EACNA,KACR,OAFc,EACAD,QAEV,IAAK,SACDqB,KAAKZ,WAAL,YAAoBR,IACpB,MACJ,IAAK,WACDoB,KAAKH,aAAL,YAAsBjB,IACtB,MACJ,IAAK,YACDoB,KAAKX,cAAL,YAAuBT,IACvB,MACJ,IAAK,YACDoB,KAAKV,cAAL,YAAuBV,IACvB,MACJ,IAAK,QACDoB,KAAKT,UAAL,YAAmBX,GAAO,EAAGA,EAAKgC,OAAS,GAC3C,MACJ,IAAK,QACDZ,KAAKP,UAAL,YAAmBb,GAAO,EAAGA,EAAKgC,OAAS,GAC3C,MACJ,IAAK,OACDZ,KAAKL,SAAL,YAAkBf,IAK1BoB,KAAKF,mB,qCAILmB,cAAcjB,KAAK1B,MAAMQ,c,iCAGlBF,GAEP,IADA,IAAMG,EAAQ,GACLuB,EAAI,EAAGA,EAAI1B,EAAKgC,OAAQN,IAC7B,IAAK,IAAIY,EAAI,EAAGA,EAAItC,EAAKgC,OAASN,EAAI,EAAGY,IACrC,GAAItC,EAAKsC,GAAGV,MAAQ5B,EAAKsC,EAAE,GAAGV,MAAO,CAAC,IAAD,EACV,CAAC5B,EAAKsC,EAAE,GAAItC,EAAKsC,IAAvCtC,EAAKsC,GAD2B,KACvBtC,EAAKsC,EAAE,GADgB,KAEjCnC,EAAMoC,KAAN,YAAevC,IAI3BoB,KAAK9B,SAAS,CAAEa,Y,oCAGNH,GAEV,IADA,IAAMG,EAAQ,GACLuB,EAAI,EAAOA,EAAI1B,EAAKgC,OAAQN,IAAM,CAGvC,IAFA,IAAMc,EAAMxC,EAAK0B,GACbY,EAAIZ,EAAI,EACLY,GAAK,GAAKE,EAAIZ,MAAQ5B,EAAKsC,GAAGV,OACjC5B,EAAKsC,EAAE,GAAKtC,EAAKsC,GACjBA,GAAK,EAETtC,EAAKsC,EAAE,GAAKE,EACZrC,EAAMoC,KAAN,YAAevC,IAEnBoB,KAAK9B,SAAS,CAAEa,Y,oCAGNH,GAEV,IADA,IAAMG,EAAQ,GACLuB,EAAI,EAAGA,EAAI1B,EAAKgC,OAAQN,IAAM,CAEnC,IADA,IAAIe,EAAWf,EACNY,EAAIZ,EAAI,EAAGY,EAAItC,EAAKgC,OAAQM,IAC7BtC,EAAKyC,GAAUb,MAAQ5B,EAAKsC,GAAGV,QAC/Ba,EAAWH,GAJgB,MAQP,CAACtC,EAAKyC,GAAWzC,EAAK0B,IAAjD1B,EAAK0B,GAR6B,KAQzB1B,EAAKyC,GARoB,KASnCtC,EAAMoC,KAAN,YAAevC,IAEnBoB,KAAK9B,SAAS,CAAEa,Y,yEAGJH,EAAM0C,EAAOC,G,4EACrBD,EAAQC,G,uBACFC,EAAMF,EAAQT,KAAKC,OAAOS,EAAMD,GAAS,G,SACzCG,QAAQC,IAAI,CACd1B,KAAKT,UAAUX,EAAM0C,EAAOE,GAC5BxB,KAAKT,UAAUX,EAAM4C,EAAM,EAAGD,K,OAGlCvB,KAAKR,MAAMZ,EAAM0C,EAAOE,EAAKD,G,uIAI/B3C,EAAM+C,EAAQH,EAAKD,GAAM,IACnBxC,EAAUiB,KAAK1B,MAAfS,MACJ6C,EAASJ,EAAM,EAEnB,KAAI5C,EAAK4C,GAAKhB,MAAQ5B,EAAKgD,GAAQpB,OAAnC,CAIA,KAAOmB,GAAUH,GAAOI,GAAUL,GAC9B,GAAI3C,EAAK+C,GAAQnB,MAAQ5B,EAAKgD,GAAQpB,MAClCmB,QACG,CAGH,IAFA,IAAMP,EAAMxC,EAAKgD,GACbP,EAAWO,EACRP,IAAaM,GAChB/C,EAAKyC,GAAYzC,EAAKyC,EAAS,GAC/BA,IAEJzC,EAAK+C,GAAUP,EACfrC,EAAMoC,KAAN,YAAevC,IAEf+C,IACAH,IACAI,IAGR5B,KAAK9B,SAAS,CAAEa,a,gCAGVH,EAAM0C,EAAOC,GACnB,GAAID,EAAQC,EAAK,CACb,IAAMM,EAAiB7B,KAAKN,UAAUd,EAAM0C,EAAOC,GACnDvB,KAAKP,UAAUb,EAAM0C,EAAOO,EAAiB,GAC7C7B,KAAKP,UAAUb,EAAMiD,EAAiB,EAAGN,M,gCAIvC3C,EAAM0C,EAAOC,GAInB,IAJyB,IACjBxC,EAAUiB,KAAK1B,MAAfS,MACF+C,EAAQR,MAED,CACT,KAAOA,GAASC,GAAO3C,EAAK2C,GAAKf,OAAS5B,EAAKkD,GAAOtB,OAClDe,IAGJ,KAAOD,GAASC,GAAO3C,EAAK0C,GAAOd,OAAS5B,EAAKkD,GAAOtB,OACpDc,IAGJ,KAAIA,GAASC,GAIT,MAJe,IAAD,EACa,CAAC3C,EAAK2C,GAAM3C,EAAK0C,IAA3C1C,EAAK0C,GADQ,KACA1C,EAAK2C,GADL,KAEdxC,EAAMoC,KAAN,YAAevC,IAfC,MAoBG,CAACA,EAAK2C,GAAM3C,EAAKkD,IAG5C,OAHClD,EAAKkD,GApBkB,KAoBVlD,EAAK2C,GApBK,KAqBxBxC,EAAMoC,KAAN,YAAevC,IACfoB,KAAK9B,SAAS,CAAEa,UACTwC,I,+BAGF3C,GAEL,IAFY,IACJG,EAAUiB,KAAK1B,MAAfS,MACCuB,EAAI1B,EAAKgC,OAAS,EAAGN,GAAK,EAAGA,IAClCN,KAAKJ,QAAQhB,EAAMA,EAAKgC,OAAS,EAAGN,GAGxC,IAAKA,EAAI1B,EAAKgC,OAAS,EAAGN,EAAI,EAAGA,IAAM,CAAC,IAAD,EACd,CAAC1B,EAAK,GAAIA,EAAK0B,IAAnC1B,EAAK0B,GAD6B,KACzB1B,EAAK,GADoB,KAEnCG,EAAMoC,KAAN,YAAevC,IACfoB,KAAKJ,QAAQhB,EAAM0B,EAAG,GAE1BN,KAAK9B,SAAS,CAAEa,Y,8BAGZH,EAAMwB,EAAGE,GAAI,IACTvB,EAAUiB,KAAK1B,MAAfS,MACJgD,EAAUzB,EAAG0B,EAAO,EAAI1B,EAAI,EAAG2B,EAAQ,EAAI3B,EAAI,EAUnD,GARI0B,EAAO5B,GAAKxB,EAAK0B,GAAGE,MAAQ5B,EAAKoD,GAAMxB,QACvCuB,EAAUC,GAGVC,EAAQ7B,GAAKxB,EAAKmD,GAASvB,MAAQ5B,EAAKqD,GAAOzB,QAC/CuB,EAAUE,GAGVF,IAAYzB,EAAG,CAAC,IAAD,EACY,CAAC1B,EAAKmD,GAAUnD,EAAK0B,IAA/C1B,EAAK0B,GADS,KACL1B,EAAKmD,GADA,KAEfhD,EAAMoC,KAAN,YAAevC,IACfoB,KAAKJ,QAAQhB,EAAMwB,EAAG2B,GAE1B/B,KAAK9B,SAAS,CAAEa,Y,mCAGPH,GAGT,IAFA,IAAMG,EAAQ,GACVmD,GAAU,EAAMZ,EAAQ,EAAGC,EAAM3C,EAAKgC,OAAS,EAAGN,EAAI,EACnD4B,GAAS,CAGZ,IAFAA,GAAU,EAEL5B,EAAIgB,EAAOhB,EAAIiB,EAAKjB,IACrB,GAAI1B,EAAK0B,GAAGE,MAAQ5B,EAAK0B,EAAE,GAAGE,MAAO,CAAC,IAAD,EACV,CAAC5B,EAAK0B,EAAE,GAAI1B,EAAK0B,IAAvC1B,EAAK0B,GAD2B,KACvB1B,EAAK0B,EAAE,GADgB,KAEjCvB,EAAMoC,KAAN,YAAevC,IACfsD,GAAU,EAIlB,IAAKA,EAAW,MAMhB,IAJAA,GAAU,EAIL5B,IAFLiB,EAEe,EAAGjB,EAAIgB,EAAQ,EAAGhB,IAC7B,GAAI1B,EAAK0B,GAAGE,MAAQ5B,EAAK0B,EAAE,GAAGE,MAAO,CAAC,IAAD,EACV,CAAC5B,EAAK0B,EAAE,GAAI1B,EAAK0B,IAAvC1B,EAAK0B,GAD2B,KACvB1B,EAAK0B,EAAE,GADgB,KAEjCvB,EAAMoC,KAAN,YAAevC,IACfsD,GAAU,EAIlBZ,IAEJtB,KAAK9B,SAAS,CAAEa,Y,uCAGF,IAAD,OACLL,EAAasB,KAAK1B,MAAlBI,SACFI,EAAaqD,aAAY,WAC3B,EAAKpC,YACN,IAAOc,KAAKuB,IAAI,GAAI1D,IAEvBsB,KAAK9B,SAAS,CAAEY,iB,gCAGT,IACCC,EAAUiB,KAAK1B,MAAfS,MACR,GAAIA,EAAM6B,OAAV,CACI,IAAMhC,EAAOG,EAAMsD,QACnBrC,KAAK9B,SAAS,CAAEU,cAGpBoB,KAAKgB,iB,+BAGC,IAAD,SAC2ChB,KAAK1B,MAA7CC,EADH,EACGA,MAAOC,EADV,EACUA,OAAQI,EADlB,EACkBA,KAAMH,EADxB,EACwBA,KAAMC,EAD9B,EAC8BA,SAG7B4D,EAAI,SAAAC,GAAC,OAAIA,EAAEhC,OACXiC,EAAI,SAAAD,GAAC,OAAIA,EAAE/B,OAGXiC,EAAOlE,EACPmE,EAAOlE,EAAS,IAGhBmE,EAASC,YAAU,CACrBC,WAAY,CAAC,EAAGJ,GAChBK,OAAQlE,EAAKmE,IAAIT,GACjBU,QAAS,KAEPC,EAASC,YAAY,CACvBL,WAAY,CAACH,EAAM,GACnBI,OAAQ,CAAC,EAAGjC,KAAKsC,IAAL,MAAAtC,KAAI,YAAQjC,EAAKmE,IAAIP,QAGrC,OACI,kBAACY,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,KACI,sDAEJ,kBAACD,EAAA,EAAKE,KAAN,CAAWC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,WACvE,yBAAKnF,MAAOA,EAAOC,OAAQA,GACvB,0BAAMD,MAAOA,EAAOC,OAAQA,EAAQmF,KAAM,UAAWC,GAAI,KACzD,kBAACC,EAAA,EAAD,CAAOlD,IAAK,IACP/B,EAAKmE,KAAI,SAACR,EAAGjC,GACV,IAAMwD,EAASxB,EAAEC,GACXwB,EAAWpB,EAAOqB,YAClBC,EAAYvB,EAAOO,EAAOT,EAAED,IAC5B2B,EAAOvB,EAAOmB,GACdK,EAAOzB,EAAOuB,EACpB,OACI,kBAACG,EAAA,EAAD,CACIhD,IAAG,cAAS0C,GACZxB,EAAG4B,EACH1B,EAAG2B,EACH5F,MAAOwF,EACPvF,OAAQyF,EACRN,KAAK,iCAO7B,kBAACP,EAAA,EAAKiB,OAAN,KACI,kBAACC,EAAA,EAAD,CAAKX,MAAI,EAACY,QAAQ,OAAOC,iBAAiB,UACtC,kBAACF,EAAA,EAAIG,KAAL,KACI,kBAACH,EAAA,EAAII,KAAL,CAAUC,SAAS,SAASC,QAAS,kBAAM,EAAKzF,kBAAkB,YAAlE,WAEJ,kBAACmF,EAAA,EAAIG,KAAL,KACI,kBAACH,EAAA,EAAII,KAAL,CAAUC,SAAS,YAAYC,QAAS,kBAAM,EAAKzF,kBAAkB,eAArE,cAEJ,kBAACmF,EAAA,EAAIG,KAAL,KACI,kBAACH,EAAA,EAAII,KAAL,CAAUC,SAAS,YAAYC,QAAS,kBAAM,EAAKzF,kBAAkB,eAArE,cAEJ,kBAACmF,EAAA,EAAIG,KAAL,KACI,kBAACH,EAAA,EAAII,KAAL,CAAUC,SAAS,QAAQC,QAAS,kBAAM,EAAKzF,kBAAkB,WAAjE,UAEJ,kBAACmF,EAAA,EAAIG,KAAL,KACI,kBAACH,EAAA,EAAII,KAAL,CAAUC,SAAS,QAAQC,QAAS,kBAAM,EAAKzF,kBAAkB,WAAjE,UAEJ,kBAACmF,EAAA,EAAIG,KAAL,KACI,kBAACH,EAAA,EAAII,KAAL,CAAUC,SAAS,OAAOC,QAAS,kBAAM,EAAKzF,kBAAkB,UAAhE,SAEJ,kBAACmF,EAAA,EAAIG,KAAL,KACI,kBAACH,EAAA,EAAII,KAAL,CAAUC,SAAS,WAAWC,QAAS,kBAAM,EAAKzF,kBAAkB,cAApE,cAGR,6BACA,kBAAC0F,EAAA,EAAD,KACI,kBAACC,EAAA,EAAKjB,MAAN,CAAYkB,GAAIC,KACZ,kBAACF,EAAA,EAAKG,MAAN,cAAoBxG,GACpB,kBAACqG,EAAA,EAAKI,QAAN,CAAc9G,KAAK,OAAO+G,KAAK,QAAQC,IAAK,GAAIjC,IAAK,IAAKkC,KAAM,GAAIhH,MAAOI,EAAM6G,SAAUtF,KAAKhC,qBAEpG,kBAAC8G,EAAA,EAAKjB,MAAN,CAAYkB,GAAIC,KACZ,kBAACF,EAAA,EAAKG,MAAN,eAAqBM,SAAS7G,GAAY,GAC1C,kBAACoG,EAAA,EAAKI,QAAN,CAAc9G,KAAK,WAAW+G,KAAK,QAAQC,IAAK,EAAGjC,IAAK,EAAGkC,KAAM,EAAGhH,MAAOK,EAAU4G,SAAUtF,KAAKhC,qBAExG,kBAACgH,EAAA,EAAD,KACI,kBAACQ,EAAA,EAAD,CAAQjB,QAAQ,OAAOK,QAAS5E,KAAKd,iBAAkBuG,OAAK,GAA5D,YACA,kBAACD,EAAA,EAAD,CAAQjB,QAAQ,OAAOK,QAAS5E,KAAKhB,gBAAiByG,OAAK,GAA3D,gB,GA3YM3H,aCQnB4H,MAXf,WACE,OACE,6BACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,GAEd,kBAAC,EAAD,SCFYC,QACW,cAA7B5F,OAAO6F,SAASC,UAEe,UAA7B9F,OAAO6F,SAASC,UAEhB9F,OAAO6F,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3ac52fe0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Graph } from '@vx/network';\n\n\nexport default class Sort extends Component {\n    constructor() {\n        super();\n        this.state = {\n            width: 0, height: 0,\n            size: 100,\n            nodes: [], links: [], adjList: [],\n        }\n        this.handleClickReset = this.handleClickReset.bind(this);\n        this.minimumSpanningTree = this.minimumSpanningTree.bind(this);\n        this.travellingSalesmanProblem = this.travellingSalesmanProblem.bind(this);\n    }\n\n    componentDidMount() {\n        const { size } = this.state;\n        const width = window.innerWidth * 0.8, height = window.innerHeight * 0.8;\n        const nodes = this.generateArray(size, width, height);\n        this.setState({\n            width, height, nodes\n        });\n    }\n\n    generateArray(n, width, height) {\n        var arr = [];\n        for (var i = 0; i < n; i ++) { \n            arr[i] = { \n                x: 15 + Math.floor(Math.random() * (width - 30)), \n                y: 15 + Math.floor(Math.random() * (height - 30))\n            } \n        }\n        return arr;\n    }\n\n    handleClickReset() {\n        const { size, width, height } = this.state;\n        const nodes = this.generateArray(size, width, height);\n        const links = [], adjList = [];\n        this.setState({ nodes, links, adjList });\n    }\n\n    // travellingSalesmanProblem() {\n    //     const { nodes, links } = this.state;\n    //     var currentNode = 0;\n    //     // while (true) {\n    //     //     var nextNode = \n    //     // }\n    // }\n\n    travellingSalesmanProblem() {\n        const { nodes, links, adjList } = this.state;\n        var nextNodeNumber = 0, path = [];\n        path.push(nextNodeNumber);\n\n        var isRoot = false;\n        var nextNode = adjList[nextNodeNumber];\n        while (!isRoot) {\n            while (nextNode.length) {\n                console.log(nextNode);\n                nextNodeNumber = nextNode.pop();\n                path.push(nextNodeNumber);\n\n                nextNode = adjList[nextNodeNumber];\n            }\n\n            console.log(path);\n            console.log(links);\n            isRoot = true;\n        }\n\n        // this.setState({ nodes, links, adjList });\n    }\n\n    minimumSpanningTree() {\n        const { nodes, links, adjList } = this.state;\n        var distances = []\n        for (var i = 0; i < nodes.length - 1; i ++) {\n            for (var j = i + 1; j < nodes.length; j ++) {\n                var distance = Math.sqrt(Math.pow(nodes[i].x - nodes[j].x, 2) + Math.pow(nodes[i].y - nodes[j].y, 2));\n                distances.push({\n                    source: nodes[i], target: nodes[j], distance, i, j\n                });\n            }\n            adjList.push([]);\n        }\n        adjList.push([]);\n\n        i = 0; j = 0;\n        var parent = [], rank = []\n        \n        distances.sort((i, j) => i.distance - j.distance);\n\n        for (var node = 0; node < nodes.length; node ++) {\n            parent.push(node);\n            rank.push(0);\n        }\n\n        while (j < nodes.length - 1) {\n            const link = distances[i];\n            i ++;\n            var x = this.find(parent, link.i);\n            var y = this.find(parent, link.j);\n\n            if (x !== y) {\n                j ++;\n                links.push(link);\n                this.union(parent, rank, link.i, link.j);\n                adjList[link.i].push(link.j);\n                adjList[link.j].push(link.i);\n            }\n        }\n\n        for (i = 0; i < adjList.length; i ++) { adjList[i].sort() }\n\n        this.setState({ nodes, links, adjList })\n    }\n\n    find(parent, i) {\n        if (parent[i] === i) { return i; }\n        return this.find(parent, parent[i]);\n    }\n\n    union(parent, rank, x, y) {\n        var xroot = this.find(parent, x);\n        var yroot = this.find(parent, y);\n\n        if (rank[xroot] < rank[yroot]) {\n            parent[xroot] = yroot;\n        } else if (rank[xroot] > rank[yroot]) {\n            parent[yroot] = xroot;\n        } else {\n            parent[yroot] = xroot;\n            rank[xroot] ++;\n        }\n    }\n\n    render() { \n        const { width, height, nodes, links } = this.state;\n\n        const graph = {\n            nodes,\n            links\n        };\n\n        return (\n            <Card>\n                <Card.Header>\n                    <h1>TRAVELLING SALESMAN PROBLEM</h1>\n                </Card.Header>\n                <Card.Body style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n                    <svg width={width} height={height}>\n                        <rect width={width} height={height} rx={14} fill=\"#272b4d\" />\n                        <Graph graph={graph} />\n                    </svg>\n                </Card.Body>\n                <Card.Footer>\n                    <Row>\n                        <Col>\n                            <Button variant=\"dark\" onClick={this.handleClickReset}>Reset</Button>{' '}\n                            <Button variant=\"dark\" onClick={this.minimumSpanningTree}>MST</Button>{' '}\n                            <Button variant=\"dark\" onClick={this.travellingSalesmanProblem}>TSP</Button>{' '}\n                        </Col>\n                    </Row>\n                </Card.Footer>\n            </Card>\n        );\n    }\n}","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Nav from 'react-bootstrap/Nav';\nimport Row from 'react-bootstrap/Row';\nimport { Bar } from '@vx/shape';\nimport { Group } from '@vx/group';\nimport { scaleBand, scaleLinear } from '@vx/scale';\n\n\nexport default class Sort extends Component {\n    constructor() {\n        super();\n        this.state = {\n            width: 0, height: 0,\n            size: 100, interval: 3,\n            method: \"BUBBLE\",\n            data: this.generateArray(100),\n            intervalId: null,\n            queue: [],\n        }\n        this.handleClickSort = this.handleClickSort.bind(this);\n        this.handleClickReset = this.handleClickReset.bind(this);\n        this.handleClickMethod = this.handleClickMethod.bind(this);\n\n        this.bubbleSort = this.bubbleSort.bind(this);\n        this.insertionSort = this.insertionSort.bind(this);\n        this.selectionSort = this.selectionSort.bind(this);\n        this.mergeSort = this.mergeSort.bind(this);\n        this.merge = this.merge.bind(this);\n        this.quickSort = this.quickSort.bind(this);\n        this.partition = this.partition.bind(this);\n        this.heapSort = this.heapSort.bind(this);\n        this.heapify = this.heapify.bind(this);\n        this.cocktailSort = this.cocktailSort.bind(this);\n\n        this.startAnimation = this.startAnimation.bind(this);\n        this.dequeue = this.dequeue.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({\n            width: window.innerWidth * 0.8,\n            height: window.innerHeight * 0.7,\n        });\n    }\n\n    generateArray(n) {\n        var arr = [];\n        for (var i = 0; i < n; i ++) { arr[i] = { index: i, score: i + 1 } }\n        var temp, curr, top = arr.length;\n        if (top) while(--top) {\n            curr = Math.floor(Math.random() * (top + 1));\n            temp = arr[curr];\n            arr[curr] = arr[top];\n            arr[top] = temp;\n        }\n        return arr;\n    }\n\n    handleInputChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n    \n    handleClickMethod(method) {\n        this.setState({ method });\n        this.handleClickReset();\n    }\n\n    handleClickReset() {\n        this.stopInterval();\n        const { size } = this.state;\n        const data = this.generateArray(size);\n        const queue = [];\n        this.setState({ data, queue });\n    }\n\n    handleClickSort() {\n        const { data, method } = this.state;\n        switch(method) {\n            case \"BUBBLE\":\n                this.bubbleSort([...data]);\n                break;\n            case \"COCKTAIL\":\n                this.cocktailSort([...data]);\n                break;\n            case \"INSERTION\":\n                this.insertionSort([...data]);\n                break;\n            case \"SELECTION\":\n                this.selectionSort([...data]);\n                break;\n            case \"MERGE\":\n                this.mergeSort([...data], 0, data.length - 1);\n                break;\n            case \"QUICK\":\n                this.quickSort([...data], 0, data.length - 1);\n                break;\n            case \"HEAP\":\n                this.heapSort([...data]);\n                break;\n            default:\n                break;\n        }\n        this.startAnimation();\n    }\n\n    stopInterval() {\n        clearInterval(this.state.intervalId);\n    }\n\n    bubbleSort(data) {\n        const queue = [];\n        for (var i = 0; i < data.length; i ++) {\n            for (var j = 0; j < data.length - i - 1; j ++) {\n                if (data[j].score > data[j+1].score) {\n                    [data[j], data[j+1]] = [data[j+1], data[j]];\n                    queue.push([...data]);\n                }\n            }\n        }\n        this.setState({ queue });\n    }\n\n    insertionSort(data) {\n        const queue = [];\n        for (var i = 0 + 1; i < data.length; i ++) {\n            const key = data[i];\n            var j = i - 1;\n            while (j >= 0 && key.score < data[j].score) {\n                data[j+1] = data[j];\n                j -= 1;\n            }\n            data[j+1] = key;\n            queue.push([...data]);\n        }\n        this.setState({ queue });\n    }\n\n    selectionSort(data) {\n        const queue = [];\n        for (var i = 0; i < data.length; i ++) {\n            var minIndex = i;\n            for (var j = i + 1; j < data.length; j ++) {\n                if (data[minIndex].score > data[j].score) {\n                    minIndex = j;\n                }\n            }\n\n            [data[i], data[minIndex]] = [data[minIndex], data[i]]\n            queue.push([...data]);\n        }\n        this.setState({ queue });\n    }\n\n    async mergeSort(data, start, end) {\n        if (start < end) {\n            const mid = start + Math.floor((end - start) / 2);\n            await Promise.all([\n                this.mergeSort(data, start, mid),\n                this.mergeSort(data, mid + 1, end),\n            ]);\n\n            this.merge(data, start, mid, end);\n        }\n    }\n\n    merge(data, start1, mid, end) {\n        const { queue } = this.state;\n        let start2 = mid + 1;\n\n        if (data[mid].score < data[start2].score) {\n            return;\n        }\n\n        while (start1 <= mid && start2 <= end) {\n            if (data[start1].score < data[start2].score) {\n                start1 ++;\n            } else {\n                const key = data[start2];\n                let minIndex = start2;\n                while (minIndex !== start1) {\n                    data[minIndex] = data[minIndex-1];\n                    minIndex --;\n                }\n                data[start1] = key;\n                queue.push([...data]);\n\n                start1 ++;\n                mid ++;\n                start2 ++;\n            }\n        }\n        this.setState({ queue });\n    }\n\n    quickSort(data, start, end) {\n        if (start < end) {\n            const partitionIndex = this.partition(data, start, end);\n            this.quickSort(data, start, partitionIndex - 1);\n            this.quickSort(data, partitionIndex + 1, end);\n        }\n    }\n\n    partition(data, start, end) {\n        const { queue } = this.state;\n        const pivot = start++;\n\n        while (true) {\n            while (start <= end && data[end].score >= data[pivot].score) {\n                end --;\n            }\n\n            while (start <= end && data[start].score <= data[pivot].score) {\n                start ++;\n            }\n\n            if (start <= end) {\n                [data[start], data[end]] = [data[end], data[start]]\n                queue.push([...data]);\n            } else {\n                break;\n            }\n        }\n        [data[pivot], data[end]] = [data[end], data[pivot]]\n        queue.push([...data]);\n        this.setState({ queue });\n        return end;\n    }\n\n    heapSort(data) {\n        const { queue } = this.state;\n        for (var i = data.length - 1; i >= 0; i --) {\n            this.heapify(data, data.length - 1, i);\n        }\n\n        for (i = data.length - 1; i > 0; i --) {\n            [data[i], data[0]] = [data[0], data[i]];\n            queue.push([...data]);\n            this.heapify(data, i, 0);\n        }\n        this.setState({ queue });\n    }\n\n    heapify(data, n, i) {\n        const { queue } = this.state;\n        var largest = i, left = 2 * i + 1, right = 2 * i + 2;\n\n        if (left < n && data[i].score < data[left].score) {\n            largest = left; \n        }\n\n        if (right < n && data[largest].score < data[right].score) {\n            largest = right;\n        }\n\n        if (largest !== i) {\n            [data[i], data[largest]] = [data[largest], data[i]];\n            queue.push([...data]);\n            this.heapify(data, n, largest);\n        }\n        this.setState({ queue });\n    }\n\n    cocktailSort(data) {\n        const queue = [];\n        var swapped = true, start = 0, end = data.length - 1, i = 0;\n        while (swapped) {\n            swapped = false;\n\n            for (i = start; i < end; i ++) {\n                if (data[i].score > data[i+1].score) {\n                    [data[i], data[i+1]] = [data[i+1], data[i]];\n                    queue.push([...data]);\n                    swapped = true;\n                }\n            }\n\n            if (!swapped) { break; }\n\n            swapped = false;\n\n            end --;\n\n            for (i = end - 1; i > start - 1; i --) {\n                if (data[i].score > data[i+1].score) {\n                    [data[i], data[i+1]] = [data[i+1], data[i]];\n                    queue.push([...data]);\n                    swapped = true;\n                }\n            }\n\n            start ++;\n        }\n        this.setState({ queue });\n    }\n\n    startAnimation() {\n        const { interval } = this.state;\n        const intervalId = setInterval(() => {\n            this.dequeue();\n        }, 1000 / Math.pow(10, interval));\n\n        this.setState({ intervalId })\n    }\n\n    dequeue() {\n        const { queue } = this.state;\n        if (queue.length) {\n            const data = queue.shift();\n            this.setState({ data });\n            return;\n        }\n        this.stopInterval();\n    }\n\n    render() { \n        const { width, height, data, size, interval } = this.state;\n\n        // accessors\n        const x = d => d.index;\n        const y = d => d.score;\n\n        // bounds\n        const xMax = width;\n        const yMax = height - 120;\n\n        // scales\n        const xScale = scaleBand({\n            rangeRound: [0, xMax],\n            domain: data.map(x),\n            padding: 0.4\n        });\n        const yScale = scaleLinear({\n            rangeRound: [yMax, 0],\n            domain: [0, Math.max(...data.map(y))]\n        });\n\n        return (\n            <Card>\n                <Card.Header>\n                    <h1>Sorting Visualization</h1>\n                </Card.Header>\n                <Card.Body style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n                    <svg width={width} height={height}>\n                        <rect width={width} height={height} fill={\"#242424\"} rx={14} />\n                        <Group top={40}>\n                            {data.map((d, i) => {\n                                const letter = x(d);\n                                const barWidth = xScale.bandwidth();\n                                const barHeight = yMax - yScale(y(d));\n                                const barX = xScale(letter);\n                                const barY = yMax - barHeight;\n                                return (\n                                    <Bar\n                                        key={`bar-${letter}`}\n                                        x={barX}\n                                        y={barY}\n                                        width={barWidth}\n                                        height={barHeight}\n                                        fill=\"rgba(23, 233, 217, .5)\"\n                                    />\n                                );\n                            })}\n                        </Group>\n                    </svg>\n                </Card.Body>\n                <Card.Footer>\n                    <Nav fill variant='tabs' defaultActiveKey='bubble'>\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"bubble\" onClick={() => this.handleClickMethod('BUBBLE')}>Bubble</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"insertion\" onClick={() => this.handleClickMethod('INSERTION')}>Insertion</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"selection\" onClick={() => this.handleClickMethod('SELECTION')}>Selection</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"merge\" onClick={() => this.handleClickMethod('MERGE')}>Merge</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"quick\" onClick={() => this.handleClickMethod('QUICK')}>Quick</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"heap\" onClick={() => this.handleClickMethod('HEAP')}>Heap</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"cocktail\" onClick={() => this.handleClickMethod('COCKTAIL')}>Cocktail</Nav.Link>\n                        </Nav.Item>\n                    </Nav>\n                    <br />\n                    <Row>\n                        <Form.Group as={Col}>\n                            <Form.Label>Size: { size }</Form.Label>\n                            <Form.Control name=\"size\" type=\"range\" min={10} max={500} step={10} value={size} onChange={this.handleInputChange} />\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Form.Label>Speed: { parseInt(interval) + 1 }</Form.Label>\n                            <Form.Control name=\"interval\" type=\"range\" min={0} max={3} step={1} value={interval} onChange={this.handleInputChange} />\n                        </Form.Group>\n                        <Col>\n                            <Button variant=\"dark\" onClick={this.handleClickReset} block>Generate</Button>\n                            <Button variant=\"dark\" onClick={this.handleClickSort} block>Sort</Button>\n                        </Col>\n                    </Row>\n                </Card.Footer>\n            </Card>\n        );\n    }\n}","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\nimport Graph from './views/graph';\nimport Sort from './views/sort';\n\n\nfunction App() {\n  return (\n    <div>\n      <Container fluid>\n        {/* <Graph />  */}\n        <Sort />  \n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}