{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","lazy","Sorting","App","useState","window","innerWidth","width","setWidth","innerHeight","height","setHeight","useEffect","updateWindowDimensions","addEventListener","removeEventListener","fallback","bg","variant","Brand","as","Link","to","Nav","Container","fluid","path","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+TAQMA,G,MAAOC,gBAAK,kBAAM,iCAClBC,EAAUD,gBAAK,kBAAM,sDACfA,gBAAK,kBAAM,gCAoDRE,MAjDf,WAAgB,IAAD,EACeC,mBAA6B,GAApBC,OAAOC,YAD/B,mBACLC,EADK,KACEC,EADF,OAEiBJ,mBAA8B,GAArBC,OAAOI,aAFjC,mBAELC,EAFK,KAEGC,EAFH,KAeb,OAXAC,qBAAU,WACR,IAAMC,EAAyB,WAC7BL,EAA6B,GAApBH,OAAOC,YAChBK,EAA+B,GAArBN,OAAOI,cAGnB,OADAJ,OAAOS,iBAAiB,SAAUD,GAC3B,WACLR,OAAOU,oBAAoB,SAAUF,OAKvC,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUG,SAAU,4CAClB,kBAAC,IAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAAC,IAAOC,MAAR,CAAcC,GAAIC,IAAMC,GAAG,KAA3B,yBACA,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIF,KAAL,CAAUD,GAAIC,IAAMC,GAAG,YAAvB,aAIJ,kBAACE,EAAA,EAAD,CAAWC,OAAK,GACd,kBAAC,IAAD,KAOE,kBAAC,IAAD,CAAOC,KAAK,YACV,kBAACxB,EAAD,CACEK,MAAOA,EACPG,OAAQA,KAGZ,kBAAC,IAAD,CAAOgB,KAAK,KACV,kBAAC1B,EAAD,YCzCR2B,EAAcC,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,yBAAwBpD,OAAOwB,SAAS6B,MACpDC,SAAWtD,OAAOwB,SAAS8B,OAIvC,OAGFtD,OAAOS,iBAAiB,QAAQ,WAC9B,IAAMmB,EAAK,UAAMwB,yBAAN,sBAEP9B,IAgEV,SAAiCM,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BjC,OAAOwB,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAuB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.acef8843.chunk.js","sourcesContent":["import React, { useState, useEffect, lazy, Suspense } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\nimport NavBar from 'react-bootstrap/Navbar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Link, Switch, Route } from 'react-router-dom';\n\nimport './App.css';\nconst Home = lazy(() => import('./views/home'));\nconst Sorting = lazy(() => import('./views/sorting'));\nconst TSP = lazy(() => import('./views/tsp'));\n\n\nfunction App() {\n  const [ width, setWidth ] = useState(window.innerWidth * 0.8);\n  const [ height, setHeight ] = useState(window.innerHeight * 0.7);\n  \n  useEffect(() => {\n    const updateWindowDimensions = () => {\n      setWidth(window.innerWidth * 0.8);\n      setHeight(window.innerHeight * 0.7);\n    }\n    window.addEventListener('resize', updateWindowDimensions);\n    return () => {\n      window.removeEventListener('resize', updateWindowDimensions);\n    }\n  })\n\n  return (\n    <Router>\n      <Suspense fallback={<div>Loading...</div>}>\n        <NavBar bg='dark' variant='dark'>\n          <NavBar.Brand as={Link} to='/'>Algorithms Visualizer</NavBar.Brand>\n          <Nav>\n            <Nav.Link as={Link} to='/sorting'>Sorting</Nav.Link>\n            {/* <Nav.Link as={Link} to='/tsp'>TSP</Nav.Link> */}\n          </Nav>\n        </NavBar>\n        <Container fluid>\n          <Switch>\n            {/* <Route path='/tsp'>\n              <TSP \n                width={width}\n                height={height}\n              /> \n            </Route> */}\n            <Route path='/sorting'>\n              <Sorting \n                width={width}\n                height={height}\n              />  \n            </Route>\n            <Route path='/'>\n              <Home />  \n            </Route>\n          </Switch>\n        </Container>\n      </Suspense>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}