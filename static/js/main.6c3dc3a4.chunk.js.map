{"version":3,"sources":["views/home.js","views/sorting.js","views/tsp.js","App.js","serviceWorker.js","index.js"],"names":["Component","Sorting","handleInputChange","event","setState","target","name","value","state","size","interval","method","data","generateArray","intervalId","queue","handleClickSort","bind","handleClickReset","handleClickMethod","bubbleSort","insertionSort","selectionSort","mergeSort","merge","quickSort","partition","heapSort","heapify","cocktailSort","startAnimation","dequeue","n","arr","i","index","score","temp","curr","top","length","Math","floor","random","this","stopInterval","clearInterval","j","push","key","minIndex","start","end","mid","Promise","all","start1","start2","partitionIndex","pivot","largest","left","right","swapped","setInterval","pow","shift","props","width","height","x","d","y","xMax","yMax","xScale","scaleBand","rangeRound","domain","map","padding","yScale","scaleLinear","max","Card","Header","Body","style","display","justifyContent","alignItems","fill","rx","Group","letter","barWidth","bandwidth","barHeight","barX","barY","Bar","Footer","Nav","variant","defaultActiveKey","Item","Link","eventKey","onClick","Row","Form","as","Col","Label","Control","type","min","step","onChange","parseInt","Button","block","App","useState","window","innerWidth","setWidth","innerHeight","setHeight","useEffect","updateWindowDimensions","addEventListener","removeEventListener","bg","Brand","to","Container","fluid","path","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6c3dc3a4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Card from 'react-bootstrap/Card';\n\n\nexport default class Home extends Component {\n    constructor() {\n        super();\n        this.state = {\n        }\n    }\n\n    render() { \n        return (\n            <Card>\n                <Card.Body style={{ justifyContent: \"center\" }}>\n                    <h3>Welcome!</h3>\n                    <p>\n                        Testing\n                    </p>\n                </Card.Body>\n            </Card>\n        );\n    }\n}","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Nav from 'react-bootstrap/Nav';\nimport Row from 'react-bootstrap/Row';\nimport { Bar } from '@vx/shape';\nimport { Group } from '@vx/group';\nimport { scaleBand, scaleLinear } from '@vx/scale';\n\n\nexport default class Sorting extends Component {\n    constructor() {\n        super();\n        this.state = {\n            size: 100, interval: 3,\n            method: \"BUBBLE\",\n            data: this.generateArray(100),\n            intervalId: null,\n            queue: [],\n        }\n        this.handleClickSort = this.handleClickSort.bind(this);\n        this.handleClickReset = this.handleClickReset.bind(this);\n        this.handleClickMethod = this.handleClickMethod.bind(this);\n\n        this.bubbleSort = this.bubbleSort.bind(this);\n        this.insertionSort = this.insertionSort.bind(this);\n        this.selectionSort = this.selectionSort.bind(this);\n        this.mergeSort = this.mergeSort.bind(this);\n        this.merge = this.merge.bind(this);\n        this.quickSort = this.quickSort.bind(this);\n        this.partition = this.partition.bind(this);\n        this.heapSort = this.heapSort.bind(this);\n        this.heapify = this.heapify.bind(this);\n        this.cocktailSort = this.cocktailSort.bind(this);\n\n        this.startAnimation = this.startAnimation.bind(this);\n        this.dequeue = this.dequeue.bind(this);\n    }\n\n    generateArray(n) {\n        var arr = [];\n        for (var i = 0; i < n; i ++) { arr[i] = { index: i, score: i + 1 } }\n        var temp, curr, top = arr.length;\n        if (top) while(--top) {\n            curr = Math.floor(Math.random() * (top + 1));\n            temp = arr[curr];\n            arr[curr] = arr[top];\n            arr[top] = temp;\n        }\n        return arr;\n    }\n\n    handleInputChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n    \n    handleClickMethod(method) {\n        this.setState({ method });\n        this.handleClickReset();\n    }\n\n    handleClickReset() {\n        this.stopInterval();\n        const { size } = this.state;\n        const data = this.generateArray(size);\n        const queue = [];\n        this.setState({ data, queue });\n    }\n\n    handleClickSort() {\n        const { data, method } = this.state;\n        switch(method) {\n            case \"BUBBLE\":\n                this.bubbleSort([...data]);\n                break;\n            case \"COCKTAIL\":\n                this.cocktailSort([...data]);\n                break;\n            case \"INSERTION\":\n                this.insertionSort([...data]);\n                break;\n            case \"SELECTION\":\n                this.selectionSort([...data]);\n                break;\n            case \"MERGE\":\n                this.mergeSort([...data], 0, data.length - 1);\n                break;\n            case \"QUICK\":\n                this.quickSort([...data], 0, data.length - 1);\n                break;\n            case \"HEAP\":\n                this.heapSort([...data]);\n                break;\n            default:\n                break;\n        }\n        this.startAnimation();\n    }\n\n    stopInterval() {\n        clearInterval(this.state.intervalId);\n    }\n\n    bubbleSort(data) {\n        const queue = [];\n        for (var i = 0; i < data.length; i ++) {\n            for (var j = 0; j < data.length - i - 1; j ++) {\n                if (data[j].score > data[j+1].score) {\n                    [data[j], data[j+1]] = [data[j+1], data[j]];\n                    queue.push([...data]);\n                }\n            }\n        }\n        this.setState({ queue });\n    }\n\n    insertionSort(data) {\n        const queue = [];\n        for (var i = 0 + 1; i < data.length; i ++) {\n            const key = data[i];\n            var j = i - 1;\n            while (j >= 0 && key.score < data[j].score) {\n                data[j+1] = data[j];\n                j -= 1;\n            }\n            data[j+1] = key;\n            queue.push([...data]);\n        }\n        this.setState({ queue });\n    }\n\n    selectionSort(data) {\n        const queue = [];\n        for (var i = 0; i < data.length; i ++) {\n            var minIndex = i;\n            for (var j = i + 1; j < data.length; j ++) {\n                if (data[minIndex].score > data[j].score) {\n                    minIndex = j;\n                }\n            }\n\n            [data[i], data[minIndex]] = [data[minIndex], data[i]]\n            queue.push([...data]);\n        }\n        this.setState({ queue });\n    }\n\n    async mergeSort(data, start, end) {\n        if (start < end) {\n            const mid = start + Math.floor((end - start) / 2);\n            await Promise.all([\n                this.mergeSort(data, start, mid),\n                this.mergeSort(data, mid + 1, end),\n            ]);\n\n            this.merge(data, start, mid, end);\n        }\n    }\n\n    merge(data, start1, mid, end) {\n        const { queue } = this.state;\n        let start2 = mid + 1;\n\n        if (data[mid].score < data[start2].score) {\n            return;\n        }\n\n        while (start1 <= mid && start2 <= end) {\n            if (data[start1].score < data[start2].score) {\n                start1 ++;\n            } else {\n                const key = data[start2];\n                let minIndex = start2;\n                while (minIndex !== start1) {\n                    data[minIndex] = data[minIndex-1];\n                    minIndex --;\n                }\n                data[start1] = key;\n                queue.push([...data]);\n\n                start1 ++;\n                mid ++;\n                start2 ++;\n            }\n        }\n        this.setState({ queue });\n    }\n\n    quickSort(data, start, end) {\n        if (start < end) {\n            const partitionIndex = this.partition(data, start, end);\n            this.quickSort(data, start, partitionIndex - 1);\n            this.quickSort(data, partitionIndex + 1, end);\n        }\n    }\n\n    partition(data, start, end) {\n        const { queue } = this.state;\n        const pivot = start++;\n\n        while (true) {\n            while (start <= end && data[end].score >= data[pivot].score) {\n                end --;\n            }\n\n            while (start <= end && data[start].score <= data[pivot].score) {\n                start ++;\n            }\n\n            if (start <= end) {\n                [data[start], data[end]] = [data[end], data[start]]\n                queue.push([...data]);\n            } else {\n                break;\n            }\n        }\n        [data[pivot], data[end]] = [data[end], data[pivot]]\n        queue.push([...data]);\n        this.setState({ queue });\n        return end;\n    }\n\n    heapSort(data) {\n        const { queue } = this.state;\n        for (var i = data.length - 1; i >= 0; i --) {\n            this.heapify(data, data.length - 1, i);\n        }\n\n        for (i = data.length - 1; i > 0; i --) {\n            [data[i], data[0]] = [data[0], data[i]];\n            queue.push([...data]);\n            this.heapify(data, i, 0);\n        }\n        this.setState({ queue });\n    }\n\n    heapify(data, n, i) {\n        const { queue } = this.state;\n        var largest = i, left = 2 * i + 1, right = 2 * i + 2;\n\n        if (left < n && data[i].score < data[left].score) {\n            largest = left; \n        }\n\n        if (right < n && data[largest].score < data[right].score) {\n            largest = right;\n        }\n\n        if (largest !== i) {\n            [data[i], data[largest]] = [data[largest], data[i]];\n            queue.push([...data]);\n            this.heapify(data, n, largest);\n        }\n        this.setState({ queue });\n    }\n\n    cocktailSort(data) {\n        const queue = [];\n        var swapped = true, start = 0, end = data.length - 1, i = 0;\n        while (swapped) {\n            swapped = false;\n\n            for (i = start; i < end; i ++) {\n                if (data[i].score > data[i+1].score) {\n                    [data[i], data[i+1]] = [data[i+1], data[i]];\n                    queue.push([...data]);\n                    swapped = true;\n                }\n            }\n\n            if (!swapped) { break; }\n\n            swapped = false;\n\n            end --;\n\n            for (i = end - 1; i > start - 1; i --) {\n                if (data[i].score > data[i+1].score) {\n                    [data[i], data[i+1]] = [data[i+1], data[i]];\n                    queue.push([...data]);\n                    swapped = true;\n                }\n            }\n\n            start ++;\n        }\n        this.setState({ queue });\n    }\n\n    startAnimation() {\n        const { interval } = this.state;\n        const intervalId = setInterval(() => {\n            this.dequeue();\n        }, 1000 / Math.pow(10, interval));\n\n        this.setState({ intervalId })\n    }\n\n    dequeue() {\n        const { queue } = this.state;\n        if (queue.length) {\n            const data = queue.shift();\n            this.setState({ data });\n            return;\n        }\n        this.stopInterval();\n    }\n\n    render() { \n        const { width, height } = this.props;\n        const { data, size, interval } = this.state;\n\n        // accessors\n        const x = d => d.index;\n        const y = d => d.score;\n\n        // bounds\n        const xMax = width;\n        const yMax = height - 100;\n\n        // scales\n        const xScale = scaleBand({\n            rangeRound: [0, xMax],\n            domain: data.map(x),\n            padding: 0.4\n        });\n        const yScale = scaleLinear({\n            rangeRound: [yMax, 0],\n            domain: [0, Math.max(...data.map(y))]\n        });\n\n        return (\n            <Card>\n                <Card.Header>\n                    <h3>Sorting</h3>\n                </Card.Header>\n                <Card.Body style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n                    <svg width={width} height={height}>\n                        <rect width={width} height={height} fill={\"#242424\"} rx={14} />\n                        <Group top={50}>\n                            {data.map((d, i) => {\n                                const letter = x(d);\n                                const barWidth = xScale.bandwidth();\n                                const barHeight = yMax - yScale(y(d));\n                                const barX = xScale(letter);\n                                const barY = yMax - barHeight;\n                                return (\n                                    <Bar\n                                        key={`bar-${letter}`}\n                                        x={barX}\n                                        y={barY}\n                                        width={barWidth}\n                                        height={barHeight}\n                                        fill=\"rgba(23, 233, 217, .5)\"\n                                    />\n                                );\n                            })}\n                        </Group>\n                    </svg>\n                </Card.Body>\n                <Card.Footer>\n                    <Nav fill variant='tabs' defaultActiveKey='bubble'>\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"bubble\" onClick={() => this.handleClickMethod('BUBBLE')}>Bubble</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"insertion\" onClick={() => this.handleClickMethod('INSERTION')}>Insertion</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"selection\" onClick={() => this.handleClickMethod('SELECTION')}>Selection</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"merge\" onClick={() => this.handleClickMethod('MERGE')}>Merge</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"quick\" onClick={() => this.handleClickMethod('QUICK')}>Quick</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"heap\" onClick={() => this.handleClickMethod('HEAP')}>Heap</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"cocktail\" onClick={() => this.handleClickMethod('COCKTAIL')}>Cocktail</Nav.Link>\n                        </Nav.Item>\n                    </Nav>\n                    <br />\n                    <Row>\n                        <Form.Group as={Col}>\n                            <Form.Label>Size: { size }</Form.Label>\n                            <Form.Control name=\"size\" type=\"range\" min={10} max={500} step={10} value={size} onChange={this.handleInputChange} />\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Form.Label>Speed: { parseInt(interval) + 1 }</Form.Label>\n                            <Form.Control name=\"interval\" type=\"range\" min={0} max={3} step={1} value={interval} onChange={this.handleInputChange} />\n                        </Form.Group>\n                        <Col>\n                            <Button variant=\"dark\" onClick={this.handleClickReset} block>Generate</Button>\n                            <Button variant=\"dark\" onClick={this.handleClickSort} block>Sort</Button>\n                        </Col>\n                    </Row>\n                </Card.Footer>\n            </Card>\n        );\n    }\n}","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Graph } from '@vx/network';\n\n\nexport default class TSP extends Component {\n    constructor() {\n        super();\n        this.state = {\n            size: 100,\n            nodes: [], links: [], adjList: [],\n        }\n        this.handleClickReset = this.handleClickReset.bind(this);\n        this.minimumSpanningTree = this.minimumSpanningTree.bind(this);\n        this.travellingSalesmanProblem = this.travellingSalesmanProblem.bind(this);\n    }\n\n    componentDidMount() {\n        const { width, height } = this.props;\n        const { size } = this.state;\n        const nodes = this.generateArray(size, width, height);\n        this.setState({\n            width, height, nodes\n        });\n    }\n\n    generateArray(n, width, height) {\n        var arr = [];\n        for (var i = 0; i < n; i ++) { \n            arr[i] = { \n                x: 25 + Math.floor(Math.random() * (width - 50)), \n                y: 25 + Math.floor(Math.random() * (height - 50))\n            } \n        }\n        return arr;\n    }\n\n    handleClickReset() {\n        const { size, width, height } = this.state;\n        const nodes = this.generateArray(size, width, height);\n        const links = [], adjList = [];\n        this.setState({ nodes, links, adjList });\n    }\n\n    // travellingSalesmanProblem() {\n    //     const { nodes, links } = this.state;\n    //     var currentNode = 0;\n    //     // while (true) {\n    //     //     var nextNode = \n    //     // }\n    // }\n\n    travellingSalesmanProblem() {\n        const { links, adjList } = this.state;\n        var nextNodeNumber = 0, path = [];\n        path.push(nextNodeNumber);\n\n        var isRoot = false;\n        var nextNode = adjList[nextNodeNumber];\n        while (!isRoot) {\n            while (nextNode.length) {\n                console.log(nextNode);\n                nextNodeNumber = nextNode.pop();\n                path.push(nextNodeNumber);\n\n                nextNode = adjList[nextNodeNumber];\n            }\n\n            console.log(path);\n            console.log(links);\n            isRoot = true;\n        }\n\n        // this.setState({ nodes, links, adjList });\n    }\n\n    minimumSpanningTree() {\n        const { nodes, links, adjList } = this.state;\n        var distances = []\n        for (var i = 0; i < nodes.length - 1; i ++) {\n            for (var j = i + 1; j < nodes.length; j ++) {\n                var distance = Math.sqrt(Math.pow(nodes[i].x - nodes[j].x, 2) + Math.pow(nodes[i].y - nodes[j].y, 2));\n                distances.push({\n                    source: nodes[i], target: nodes[j], distance, i, j\n                });\n            }\n            adjList.push([]);\n        }\n        adjList.push([]);\n\n        i = 0; j = 0;\n        var parent = [], rank = []\n        \n        distances.sort((i, j) => i.distance - j.distance);\n\n        for (var node = 0; node < nodes.length; node ++) {\n            parent.push(node);\n            rank.push(0);\n        }\n\n        while (j < nodes.length - 1) {\n            const link = distances[i];\n            i ++;\n            var x = this.find(parent, link.i);\n            var y = this.find(parent, link.j);\n\n            if (x !== y) {\n                j ++;\n                links.push(link);\n                this.union(parent, rank, link.i, link.j);\n                adjList[link.i].push(link.j);\n                adjList[link.j].push(link.i);\n            }\n        }\n\n        for (i = 0; i < adjList.length; i ++) { adjList[i].sort() }\n\n        this.setState({ nodes, links, adjList })\n    }\n\n    find(parent, i) {\n        if (parent[i] === i) { return i; }\n        return this.find(parent, parent[i]);\n    }\n\n    union(parent, rank, x, y) {\n        var xroot = this.find(parent, x);\n        var yroot = this.find(parent, y);\n\n        if (rank[xroot] < rank[yroot]) {\n            parent[xroot] = yroot;\n        } else if (rank[xroot] > rank[yroot]) {\n            parent[yroot] = xroot;\n        } else {\n            parent[yroot] = xroot;\n            rank[xroot] ++;\n        }\n    }\n\n    render() { \n        const { width, height } = this.props;\n        const { nodes, links } = this.state;\n\n        const graph = {\n            nodes,\n            links\n        };\n\n        return (\n            <Card>\n                <Card.Header>\n                    <h3>Travelling Salesman Problem</h3>\n                </Card.Header>\n                <Card.Body style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n                    <svg width={width} height={height}>\n                        <rect width={width} height={height} rx={14} fill=\"#272b4d\" />\n                        <Graph graph={graph} />\n                    </svg>\n                </Card.Body>\n                <Card.Footer>\n                    <Row>\n                        <Col>\n                            <Button variant=\"dark\" onClick={this.handleClickReset}>Reset</Button>{' '}\n                            <Button variant=\"dark\" onClick={this.minimumSpanningTree}>MST</Button>{' '}\n                            <Button variant=\"dark\" onClick={this.travellingSalesmanProblem}>TSP</Button>{' '}\n                        </Col>\n                    </Row>\n                </Card.Footer>\n            </Card>\n        );\n    }\n}","import React, { useState, useEffect } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\nimport NavBar from 'react-bootstrap/Navbar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Link, Switch, Route } from 'react-router-dom';\n\nimport './App.css';\nimport Home from './views/home';\nimport Sorting from './views/sorting';\nimport TSP from './views/tsp';\n\n\nfunction App() {\n  const [ width, setWidth ] = useState(window.innerWidth * 0.8);\n  const [ height, setHeight ] = useState(window.innerHeight * 0.7);\n  \n  useEffect(() => {\n    const updateWindowDimensions = () => {\n      setWidth(window.innerWidth * 0.8);\n      setHeight(window.innerHeight * 0.7);\n    }\n    window.addEventListener('resize', updateWindowDimensions);\n    return () => {\n      window.removeEventListener('resize', updateWindowDimensions);\n    }\n  })\n\n  return (\n    <Router>\n      <NavBar bg='dark' variant='dark'>\n        <NavBar.Brand as={Link} to='/'>Algorithms Visualizer</NavBar.Brand>\n        <Nav>\n          <Nav.Link as={Link} to='/'>Sorting</Nav.Link>\n          {/* <Nav.Link as={Link} to='/tsp'>TSP</Nav.Link> */}\n        </Nav>\n      </NavBar>\n      <Container fluid>\n        <Switch>\n          {/* <Route path='/tsp'>\n            <TSP \n              width={width}\n              height={height}\n            /> \n          </Route> */}\n          <Route path='/'>\n            <Sorting \n              width={width}\n              height={height}\n            />  \n          </Route>\n          {/* <Route path='/'>\n            <Home />  \n          </Route> */}\n        </Switch>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}